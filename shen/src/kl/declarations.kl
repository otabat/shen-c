"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise_arity_table (V1587) (cond ((= () V1587) ()) ((and (cons? V1587) (cons? (tl V1587))) (let DecArity (put (hd V1587) arity (hd (tl V1587)) (value *property-vector*)) (shen.initialise_arity_table (tl (tl V1587))))) (true (shen.f_error shen.initialise_arity_table))))

(defun arity (V1589) (trap-error (get V1589 arity (value *property-vector*)) (lambda E -1)))

(defun systemf (V1591) (let Shen (intern "shen") (let External (get Shen shen.external-symbols (value *property-vector*)) (let Place (put Shen shen.external-symbols (adjoin V1591 External) (value *property-vector*)) V1591))))

(defun adjoin (V1594 V1595) (if (element? V1594 V1595) V1595 (cons V1594 V1595)))

(defun shen.lambda-form-entry (V1597) (cond ((= package V1597) ()) ((= receive V1597) ()) (true (let ArityF (arity V1597) (if (= ArityF -1) () (if (= ArityF 0) () (cons (cons V1597 (eval-kl (shen.lambda-form V1597 ArityF))) ())))))))

(defun shen.lambda-form (V1600 V1601) (cond ((= 0 V1601) V1600) (true (let X (gensym V) (cons lambda (cons X (cons (shen.lambda-form (shen.add-end V1600 X) (- V1601 1)) ())))))))

(defun shen.add-end (V1604 V1605) (cond ((cons? V1604) (append V1604 (cons V1605 ()))) (true (cons V1604 (cons V1605 ())))))

(defun shen.set-lambda-form-entry (V1607) (cond ((cons? V1607) (put (hd V1607) shen.lambda-form (tl V1607) (value *property-vector*))) (true (shen.f_error shen.set-lambda-form-entry))))

(defun specialise (V1609) (do (set shen.*special* (cons V1609 (value shen.*special*))) V1609))

(defun unspecialise (V1611) (do (set shen.*special* (remove V1611 (value shen.*special*))) V1611))



