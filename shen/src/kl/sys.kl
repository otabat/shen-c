"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun thaw (V3056) (V3056))

(defun eval (V3058) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V3058) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V3060) (eval-kl (shen.elim-def (shen.proc-input+ V3060))))

(defun shen.proc-input+ (V3062) (cond ((and (cons? V3062) (and (= input+ (hd V3062)) (and (cons? (tl V3062)) (and (cons? (tl (tl V3062))) (= () (tl (tl (tl V3062)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V3062))) (tl (tl V3062))))) ((and (cons? V3062) (and (= shen.read+ (hd V3062)) (and (cons? (tl V3062)) (and (cons? (tl (tl V3062))) (= () (tl (tl (tl V3062)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V3062))) (tl (tl V3062))))) ((cons? V3062) (map (lambda Z (shen.proc-input+ Z)) V3062)) (true V3062)))

(defun shen.elim-def (V3064) (cond ((and (cons? V3064) (and (= define (hd V3064)) (cons? (tl V3064)))) (shen.shen->kl (hd (tl V3064)) (tl (tl V3064)))) ((and (cons? V3064) (and (= defmacro (hd V3064)) (cons? (tl V3064)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V3064)) (append (tl (tl V3064)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V3064))) Def)))) ((and (cons? V3064) (and (= defcc (hd V3064)) (cons? (tl V3064)))) (shen.elim-def (shen.yacc V3064))) ((cons? V3064) (map (lambda Z (shen.elim-def Z)) V3064)) (true V3064)))

(defun shen.add-macro (V3066) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V3066 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V3066) (value *macros*)))))))

(defun shen.packaged? (V3074) (cond ((and (cons? V3074) (and (= package (hd V3074)) (and (cons? (tl V3074)) (cons? (tl (tl V3074)))))) true) (true false)))

(defun external (V3076) (trap-error (get V3076 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3076 " has not been used.
" shen.a))))))

(defun internal (V3078) (trap-error (get V3078 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V3078 " has not been used.
" shen.a))))))

(defun shen.package-contents (V3082) (cond ((and (cons? V3082) (and (= package (hd V3082)) (and (cons? (tl V3082)) (and (= null (hd (tl V3082))) (cons? (tl (tl V3082))))))) (tl (tl (tl V3082)))) ((and (cons? V3082) (and (= package (hd V3082)) (and (cons? (tl V3082)) (cons? (tl (tl V3082)))))) (let PackageNameDot (intern (cn (str (hd (tl V3082))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (shen.packageh (hd (tl V3082)) (hd (tl (tl V3082))) (tl (tl (tl V3082))) ExpPackageNameDot)))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V3085 V3086) (cond ((cons? V3086) (V3085 (map (lambda Z (shen.walk V3085 Z)) V3086))) (true (V3085 V3086))))

(defun compile (V3090 V3091 V3092) (let O (V3090 (cons V3091 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V3092 O) (shen.hdtl O))))

(defun fail-if (V3095 V3096) (if (V3095 V3096) (fail) V3096))

(defun @s (V3099 V3100) (cn V3099 V3100))

(defun tc? () (value shen.*tc*))

(defun ps (V3102) (trap-error (get V3102 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V3102 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V3104) (let Vector (absvector (+ V3104 1)) (let ZeroStamp (address-> Vector 0 V3104) (let Standard (if (= V3104 0) ZeroStamp (shen.fillvector ZeroStamp 1 V3104 (fail))) Standard))))

(defun shen.fillvector (V3110 V3111 V3112 V3113) (cond ((= V3112 V3111) (address-> V3110 V3112 V3113)) (true (shen.fillvector (address-> V3110 V3111 V3113) (+ 1 V3111) V3112 V3113))))

(defun vector? (V3115) (and (absvector? V3115) (let X (trap-error (<-address V3115 0) (lambda E -1)) (and (number? X) (>= X 0)))))

(defun vector-> (V3119 V3120 V3121) (if (= V3120 0) (simple-error "cannot access 0th element of a vector
") (address-> V3119 V3120 V3121)))

(defun <-vector (V3124 V3125) (if (= V3125 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V3124 V3125) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V3127) (and (integer? V3127) (>= V3127 0)))

(defun limit (V3129) (<-address V3129 0))

(defun symbol? (V3131) (cond ((or (boolean? V3131) (or (number? V3131) (string? V3131))) false) (true (trap-error (let String (str V3131) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V3133) (cond ((= "" V3133) false) ((shen.+string? V3133) (and (shen.alpha? (pos V3133 0)) (shen.alphanums? (tlstr V3133)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V3135) (element? V3135 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V3137) (cond ((= "" V3137) true) ((shen.+string? V3137) (and (shen.alphanum? (pos V3137 0)) (shen.alphanums? (tlstr V3137)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V3139) (or (shen.alpha? V3139) (shen.digit? V3139)))

(defun shen.digit? (V3141) (element? V3141 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V3143) (cond ((or (boolean? V3143) (or (number? V3143) (string? V3143))) false) (true (trap-error (let String (str V3143) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V3145) (cond ((shen.+string? V3145) (and (shen.uppercase? (pos V3145 0)) (shen.alphanums? (tlstr V3145)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V3147) (element? V3147 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V3149) (concat V3149 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V3152 V3153) (intern (cn (str V3152) (str V3153))))

(defun @p (V3156 V3157) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V3156) (let Snd (address-> Vector 2 V3157) Vector)))))

(defun fst (V3159) (<-address V3159 1))

(defun snd (V3161) (<-address V3161 2))

(defun tuple? (V3163) (and (absvector? V3163) (= shen.tuple (trap-error (<-address V3163 0) (lambda E shen.not-tuple)))))

(defun append (V3166 V3167) (cond ((= () V3166) V3167) ((cons? V3166) (cons (hd V3166) (append (tl V3166) V3167))) (true (shen.f_error append))))

(defun @v (V3170 V3171) (let Limit (limit V3171) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V3170) (if (= Limit 0) X+NewVector (shen.@v-help V3171 1 Limit X+NewVector))))))

(defun shen.@v-help (V3177 V3178 V3179 V3180) (cond ((= V3179 V3178) (shen.copyfromvector V3177 V3180 V3179 (+ V3179 1))) (true (shen.@v-help V3177 (+ V3178 1) V3179 (shen.copyfromvector V3177 V3180 V3178 (+ V3178 1))))))

(defun shen.copyfromvector (V3185 V3186 V3187 V3188) (trap-error (vector-> V3186 V3188 (<-vector V3185 V3187)) (lambda E V3186)))

(defun hdv (V3190) (trap-error (<-vector V3190 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V3190 "
" shen.s))))))

(defun tlv (V3192) (let Limit (limit V3192) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V3192 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V3198 V3199 V3200 V3201) (cond ((= V3200 V3199) (shen.copyfromvector V3198 V3201 V3200 (- V3200 1))) (true (shen.tlv-help V3198 (+ V3199 1) V3200 (shen.copyfromvector V3198 V3201 V3199 (- V3199 1))))))

(defun assoc (V3213 V3214) (cond ((= () V3214) ()) ((and (cons? V3214) (and (cons? (hd V3214)) (= (hd (hd V3214)) V3213))) (hd V3214)) ((cons? V3214) (assoc V3213 (tl V3214))) (true (shen.f_error assoc))))

(defun shen.assoc-set (V3221 V3222 V3223) (cond ((= () V3223) (cons (cons V3221 V3222) ())) ((and (cons? V3223) (and (cons? (hd V3223)) (= (hd (hd V3223)) V3221))) (cons (cons (hd (hd V3223)) V3222) (tl V3223))) ((cons? V3223) (cons (hd V3223) (shen.assoc-set V3221 V3222 (tl V3223)))) (true (shen.f_error shen.assoc-set))))

(defun shen.assoc-rm (V3229 V3230) (cond ((= () V3230) ()) ((and (cons? V3230) (and (cons? (hd V3230)) (= (hd (hd V3230)) V3229))) (tl V3230)) ((cons? V3230) (cons (hd V3230) (shen.assoc-rm V3229 (tl V3230)))) (true (shen.f_error shen.assoc-rm))))

(defun boolean? (V3236) (cond ((= true V3236) true) ((= false V3236) true) (true false)))

(defun nl (V3238) (cond ((= 0 V3238) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V3238 1))))))

(defun difference (V3243 V3244) (cond ((= () V3243) ()) ((cons? V3243) (if (element? (hd V3243) V3244) (difference (tl V3243) V3244) (cons (hd V3243) (difference (tl V3243) V3244)))) (true (shen.f_error difference))))

(defun do (V3247 V3248) V3248)

(defun element? (V3260 V3261) (cond ((= () V3261) false) ((and (cons? V3261) (= (hd V3261) V3260)) true) ((cons? V3261) (element? V3260 (tl V3261))) (true (shen.f_error element?))))

(defun empty? (V3267) (cond ((= () V3267) true) (true false)))

(defun fix (V3270 V3271) (shen.fix-help V3270 V3271 (V3270 V3271)))

(defun shen.fix-help (V3282 V3283 V3284) (cond ((= V3284 V3283) V3284) (true (shen.fix-help V3282 V3284 (V3282 V3284)))))

(defun put (V3289 V3290 V3291 V3292) (let Curr (trap-error (shen.<-dict V3292 V3289) (lambda E ())) (let Added (shen.assoc-set V3290 V3291 Curr) (let Update (shen.dict-> V3292 V3289 Added) V3291))))

(defun unput (V3296 V3297 V3298) (let Curr (trap-error (shen.<-dict V3298 V3296) (lambda E ())) (let Removed (shen.assoc-rm V3297 Curr) (let Update (shen.dict-> V3298 V3296 Removed) V3296))))

(defun get (V3302 V3303 V3304) (let Entry (trap-error (shen.<-dict V3304 V3302) (lambda E ())) (let Result (assoc V3303 Entry) (if (empty? Result) (simple-error "value not found
") (tl Result)))))

(defun hash (V3307 V3308) (shen.mod (sum (map (lambda X (string->n X)) (explode V3307))) V3308))

(defun shen.mod (V3311 V3312) (shen.modh V3311 (shen.multiples V3311 (cons V3312 ()))))

(defun shen.multiples (V3315 V3316) (cond ((and (cons? V3316) (> (hd V3316) V3315)) (tl V3316)) ((cons? V3316) (shen.multiples V3315 (cons (* 2 (hd V3316)) V3316))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V3321 V3322) (cond ((= 0 V3321) 0) ((= () V3322) V3321) ((and (cons? V3322) (> (hd V3322) V3321)) (if (empty? (tl V3322)) V3321 (shen.modh V3321 (tl V3322)))) ((cons? V3322) (shen.modh (- V3321 (hd V3322)) V3322)) (true (shen.f_error shen.modh))))

(defun sum (V3324) (cond ((= () V3324) 0) ((cons? V3324) (+ (hd V3324) (sum (tl V3324)))) (true (shen.f_error sum))))

(defun head (V3332) (cond ((cons? V3332) (hd V3332)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V3340) (cond ((cons? V3340) (tl V3340)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V3342) (pos V3342 0))

(defun intersection (V3347 V3348) (cond ((= () V3347) ()) ((cons? V3347) (if (element? (hd V3347) V3348) (cons (hd V3347) (intersection (tl V3347) V3348)) (intersection (tl V3347) V3348))) (true (shen.f_error intersection))))

(defun reverse (V3350) (shen.reverse_help V3350 ()))

(defun shen.reverse_help (V3353 V3354) (cond ((= () V3353) V3354) ((cons? V3353) (shen.reverse_help (tl V3353) (cons (hd V3353) V3354))) (true (shen.f_error shen.reverse_help))))

(defun union (V3357 V3358) (cond ((= () V3357) V3358) ((cons? V3357) (if (element? (hd V3357) V3358) (union (tl V3357) V3358) (cons (hd V3357) (union (tl V3357) V3358)))) (true (shen.f_error union))))

(defun y-or-n? (V3360) (let Message (shen.prhush (shen.proc-nl V3360) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V3360))))))))

(defun not (V3362) (if V3362 false true))

(defun subst (V3375 V3376 V3377) (cond ((= V3377 V3376) V3375) ((cons? V3377) (map (lambda W (subst V3375 V3376 W)) V3377)) (true V3377)))

(defun explode (V3379) (shen.explode-h (shen.app V3379 "" shen.a)))

(defun shen.explode-h (V3381) (cond ((= "" V3381) ()) ((shen.+string? V3381) (cons (pos V3381 0) (shen.explode-h (tlstr V3381)))) (true (shen.f_error shen.explode-h))))

(defun cd (V3383) (set *home-directory* (if (= V3383 "") "" (shen.app V3383 "/" shen.a))))

(defun shen.for-each (V3386 V3387) (cond ((= () V3387) true) ((cons? V3387) (let _ (V3386 (hd V3387)) (shen.for-each V3386 (tl V3387)))) (true (shen.f_error shen.for-each))))

(defun map (V3392 V3393) (cond ((= () V3393) ()) ((cons? V3393) (cons (V3392 (hd V3393)) (map V3392 (tl V3393)))) (true (V3392 V3393))))

(defun length (V3395) (shen.length-h V3395 0))

(defun shen.length-h (V3398 V3399) (cond ((= () V3398) V3399) (true (shen.length-h (tl V3398) (+ V3399 1)))))

(defun occurrences (V3411 V3412) (cond ((= V3412 V3411) 1) ((cons? V3412) (+ (occurrences V3411 (hd V3412)) (occurrences V3411 (tl V3412)))) (true 0)))

(defun nth (V3419 V3420) (cond ((and (= 1 V3419) (cons? V3420)) (hd V3420)) ((cons? V3420) (nth (- V3419 1) (tl V3420))) (true (simple-error (cn "nth applied to " (shen.app V3419 (cn ", " (shen.app V3420 "
" shen.a)) shen.a))))))

(defun integer? (V3422) (and (number? V3422) (let Abs (shen.abs V3422) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V3424) (if (> V3424 0) V3424 (- 0 V3424)))

(defun shen.magless (V3427 V3428) (let Nx2 (* V3428 2) (if (> Nx2 V3427) V3428 (shen.magless V3427 Nx2))))

(defun shen.integer-test? (V3434 V3435) (cond ((= 0 V3434) true) ((> 1 V3434) false) (true (let Abs-N (- V3434 V3435) (if (> 0 Abs-N) (integer? V3434) (shen.integer-test? Abs-N V3435))))))

(defun mapcan (V3440 V3441) (cond ((= () V3441) ()) ((cons? V3441) (append (V3440 (hd V3441)) (mapcan V3440 (tl V3441)))) (true (shen.f_error mapcan))))

(defun == (V3453 V3454) (cond ((= V3454 V3453) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V3456) (and (symbol? V3456) (let Val (trap-error (value V3456) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V3458) (cond ((= "" V3458) ()) (true (cons (string->n (pos V3458 0)) (shen.string->bytes (tlstr V3458))))))

(defun maxinferences (V3460) (set shen.*maxinferences* V3460))

(defun inferences () (value shen.*infs*))

(defun protect (V3462) V3462)

(defun stoutput () (value *stoutput*))

(defun sterror () (value *sterror*))

(defun string->symbol (V3464) (let Symbol (intern V3464) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V3464 " to a symbol" shen.s))))))

(defun optimise (V3470) (cond ((= + V3470) (set shen.*optimise* true)) ((= - V3470) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V3472) (trap-error (do (external V3472) true) (lambda E false)))

(defun function (V3474) (shen.lookup-func V3474))

(defun shen.lookup-func (V3476) (trap-error (get V3476 shen.lambda-form (value *property-vector*)) (lambda E (simple-error (shen.app V3476 " has no lambda expansion
" shen.a)))))



