"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.read-char-code (V2566) (read-byte V2566))

(defun read-file-as-bytelist (V2568) (shen.read-file-as-Xlist V2568 (lambda S (read-byte S))))

(defun shen.read-file-as-charlist (V2570) (shen.read-file-as-Xlist V2570 (lambda S (shen.read-char-code S))))

(defun shen.read-file-as-Xlist (V2573 V2574) (let Stream (open V2573 in) (let X (V2574 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2574 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2579 V2580 V2581 V2582) (cond ((= -1 V2581) V2582) (true (shen.read-file-as-Xlist-help V2579 V2580 (V2580 V2579) (cons V2581 V2582)))))

(defun read-file-as-string (V2584) (let Stream (open V2584 in) (shen.rfas-h Stream (shen.read-char-code Stream) "")))

(defun shen.rfas-h (V2588 V2589 V2590) (cond ((= -1 V2589) (do (close V2588) V2590)) (true (shen.rfas-h V2588 (shen.read-char-code V2588) (cn V2590 (n->string V2589))))))

(defun input (V2592) (eval-kl (read V2592)))

(defun input+ (V2595 V2596) (let Mono? (shen.monotype V2595) (let Input (read V2596) (if (= false (shen.typecheck Input (shen.demodulate V2595))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2595 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2598) (cond ((cons? V2598) (map (lambda Z (shen.monotype Z)) V2598)) (true (if (variable? V2598) (simple-error (cn "input+ expects a monotype: not " (shen.app V2598 "
" shen.a))) V2598))))

(defun read (V2600) (hd (shen.read-loop V2600 (shen.read-char-code V2600) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2608 V2609 V2610) (cond ((= 94 V2609) (simple-error "read aborted")) ((= -1 V2609) (if (empty? V2610) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2610 (lambda E E)))) ((shen.terminator? V2609) (let AllChars (append V2610 (cons V2609 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2608 (shen.read-char-code V2608) AllChars) Read))))) (true (shen.read-loop V2608 (shen.read-char-code V2608) (append V2610 (cons V2609 ()))))))

(defun shen.terminator? (V2612) (element? V2612 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2614) (shen.lineread-loop (shen.read-char-code V2614) () V2614))

(defun shen.lineread-loop (V2619 V2620 V2621) (cond ((= -1 V2619) (if (empty? V2620) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2620 (lambda E E)))) ((= V2619 (shen.hat)) (simple-error "line read aborted")) ((element? V2619 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2620 (lambda E shen.nextline)) (let It (shen.record-it V2620) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (shen.read-char-code V2621) (append V2620 (cons V2619 ())) V2621) Line)))) (true (shen.lineread-loop (shen.read-char-code V2621) (append V2620 (cons V2619 ())) V2621))))

(defun shen.record-it (V2623) (let TrimLeft (shen.trim-whitespace V2623) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2625) (cond ((and (cons? V2625) (element? (hd V2625) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2625))) (true V2625)))

(defun shen.record-it-h (V2627) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2627))) V2627))

(defun shen.cn-all (V2629) (cond ((= () V2629) "") ((cons? V2629) (cn (hd V2629) (shen.cn-all (tl V2629)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2631) (let Charlist (shen.read-file-as-charlist V2631) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2633) (let Ns (map (lambda X (string->n X)) (explode V2633)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2641) (cond ((and (cons? V2641) (and (cons? (hd V2641)) (and (cons? (tl V2641)) (= () (tl (tl V2641)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2641)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2648 V2649) (cond ((= () V2649) "") ((= 0 V2648) "") ((cons? V2649) (cn (n->string (hd V2649)) (shen.compress-50 (- V2648 1) (tl V2649)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2651) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2651) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2651) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2651) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2651) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2651) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2651) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2651) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2651) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2651) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2651) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2651) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2651) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2651) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2651) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2654) (if (and (cons? (hd V2654)) (= 91 (shen.hdhd V2654))) (let NewStream2652 (shen.pair (shen.tlhd V2654) (shen.hdtl V2654)) (shen.pair (hd NewStream2652) shen.skip)) (fail)))

(defun shen.<rsb> (V2657) (if (and (cons? (hd V2657)) (= 93 (shen.hdhd V2657))) (let NewStream2655 (shen.pair (shen.tlhd V2657) (shen.hdtl V2657)) (shen.pair (hd NewStream2655) shen.skip)) (fail)))

(defun shen.<lcurly> (V2660) (if (and (cons? (hd V2660)) (= 123 (shen.hdhd V2660))) (let NewStream2658 (shen.pair (shen.tlhd V2660) (shen.hdtl V2660)) (shen.pair (hd NewStream2658) shen.skip)) (fail)))

(defun shen.<rcurly> (V2663) (if (and (cons? (hd V2663)) (= 125 (shen.hdhd V2663))) (let NewStream2661 (shen.pair (shen.tlhd V2663) (shen.hdtl V2663)) (shen.pair (hd NewStream2661) shen.skip)) (fail)))

(defun shen.<bar> (V2666) (if (and (cons? (hd V2666)) (= 124 (shen.hdhd V2666))) (let NewStream2664 (shen.pair (shen.tlhd V2666) (shen.hdtl V2666)) (shen.pair (hd NewStream2664) shen.skip)) (fail)))

(defun shen.<semicolon> (V2669) (if (and (cons? (hd V2669)) (= 59 (shen.hdhd V2669))) (let NewStream2667 (shen.pair (shen.tlhd V2669) (shen.hdtl V2669)) (shen.pair (hd NewStream2667) shen.skip)) (fail)))

(defun shen.<colon> (V2672) (if (and (cons? (hd V2672)) (= 58 (shen.hdhd V2672))) (let NewStream2670 (shen.pair (shen.tlhd V2672) (shen.hdtl V2672)) (shen.pair (hd NewStream2670) shen.skip)) (fail)))

(defun shen.<comma> (V2675) (if (and (cons? (hd V2675)) (= 44 (shen.hdhd V2675))) (let NewStream2673 (shen.pair (shen.tlhd V2675) (shen.hdtl V2675)) (shen.pair (hd NewStream2673) shen.skip)) (fail)))

(defun shen.<equal> (V2678) (if (and (cons? (hd V2678)) (= 61 (shen.hdhd V2678))) (let NewStream2676 (shen.pair (shen.tlhd V2678) (shen.hdtl V2678)) (shen.pair (hd NewStream2676) shen.skip)) (fail)))

(defun shen.<minus> (V2681) (if (and (cons? (hd V2681)) (= 45 (shen.hdhd V2681))) (let NewStream2679 (shen.pair (shen.tlhd V2681) (shen.hdtl V2681)) (shen.pair (hd NewStream2679) shen.skip)) (fail)))

(defun shen.<lrb> (V2684) (if (and (cons? (hd V2684)) (= 40 (shen.hdhd V2684))) (let NewStream2682 (shen.pair (shen.tlhd V2684) (shen.hdtl V2684)) (shen.pair (hd NewStream2682) shen.skip)) (fail)))

(defun shen.<rrb> (V2687) (if (and (cons? (hd V2687)) (= 41 (shen.hdhd V2687))) (let NewStream2685 (shen.pair (shen.tlhd V2687) (shen.hdtl V2687)) (shen.pair (hd NewStream2685) shen.skip)) (fail)))

(defun shen.<atom> (V2689) (let YaccParse (let Parse_shen.<str> (shen.<str> V2689) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2689) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2689) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2691) (cond ((= () V2691) "") ((and (cons? V2691) (and (= "c" (hd V2691)) (and (cons? (tl V2691)) (= "#" (hd (tl V2691)))))) (let CodePoint (shen.code-point (tl (tl V2691))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2691))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2691) (@s (hd V2691) (shen.control-chars (tl V2691)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2695) (cond ((and (cons? V2695) (= ";" (hd V2695))) "") ((and (cons? V2695) (element? (hd V2695) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2695) (shen.code-point (tl V2695)))) (true (simple-error (cn "code point parse error " (shen.app V2695 "
" shen.a))))))

(defun shen.after-codepoint (V2701) (cond ((= () V2701) ()) ((and (cons? V2701) (= ";" (hd V2701))) (tl V2701)) ((cons? V2701) (shen.after-codepoint (tl V2701))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2703) (shen.pre (reverse (shen.digits->integers V2703)) 0))

(defun shen.digits->integers (V2709) (cond ((and (cons? V2709) (= "0" (hd V2709))) (cons 0 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "1" (hd V2709))) (cons 1 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "2" (hd V2709))) (cons 2 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "3" (hd V2709))) (cons 3 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "4" (hd V2709))) (cons 4 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "5" (hd V2709))) (cons 5 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "6" (hd V2709))) (cons 6 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "7" (hd V2709))) (cons 7 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "8" (hd V2709))) (cons 8 (shen.digits->integers (tl V2709)))) ((and (cons? V2709) (= "9" (hd V2709))) (cons 9 (shen.digits->integers (tl V2709)))) (true ())))

(defun shen.<sym> (V2711) (let Parse_shen.<alpha> (shen.<alpha> V2711) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2713) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2713) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2713) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2715) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2715) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2715) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2717) (if (cons? (hd V2717)) (let Parse_Char (shen.hdhd V2717) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V2717) (shen.hdtl V2717))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2723) (cond ((= 48 V2723) true) ((= 49 V2723) true) ((= 50 V2723) true) ((= 51 V2723) true) ((= 52 V2723) true) ((= 53 V2723) true) ((= 54 V2723) true) ((= 55 V2723) true) ((= 56 V2723) true) ((= 57 V2723) true) (true false)))

(defun shen.<alpha> (V2725) (if (cons? (hd V2725)) (let Parse_Char (shen.hdhd V2725) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (shen.tlhd V2725) (shen.hdtl V2725))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2727) (or (= V2727 126) (or (and (> V2727 94) (< V2727 123)) (or (and (> V2727 59) (< V2727 91)) (or (and (> V2727 41) (and (< V2727 58) (not (= V2727 44)))) (or (and (> V2727 34) (< V2727 40)) (= V2727 33)))))))

(defun shen.<str> (V2729) (let Parse_shen.<dbq> (shen.<dbq> V2729) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2731) (if (cons? (hd V2731)) (let Parse_Char (shen.hdhd V2731) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (shen.tlhd V2731) (shen.hdtl V2731))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2733) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2733) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2733) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2735) (if (cons? (hd V2735)) (let Parse_Char (shen.hdhd V2735) (shen.pair (hd (shen.pair (shen.tlhd V2735) (shen.hdtl V2735))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2737) (if (cons? (hd V2737)) (let Parse_Char (shen.hdhd V2737) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (shen.tlhd V2737) (shen.hdtl V2737))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2739) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2739) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2739) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2739) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2739) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2739) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2739) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2742) (if (and (cons? (hd V2742)) (= 101 (shen.hdhd V2742))) (let NewStream2740 (shen.pair (shen.tlhd V2742) (shen.hdtl V2742)) (shen.pair (hd NewStream2740) shen.skip)) (fail)))

(defun shen.<log10> (V2744) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2744) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2744) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2746) (if (cons? (hd V2746)) (let Parse_Char (shen.hdhd V2746) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (shen.tlhd V2746) (shen.hdtl V2746))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2748) (if (cons? (hd V2748)) (let Parse_Char (shen.hdhd V2748) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (shen.tlhd V2748) (shen.hdtl V2748))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2750) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2750) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2750) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2752) (let Parse_shen.<digits> (shen.<digits> V2752) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2754) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2754) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2754) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2756) (if (cons? (hd V2756)) (let Parse_X (shen.hdhd V2756) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2756) (shen.hdtl V2756))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2758) (cond ((= 48 V2758) 0) ((= 49 V2758) 1) ((= 50 V2758) 2) ((= 51 V2758) 3) ((= 52 V2758) 4) ((= 53 V2758) 5) ((= 54 V2758) 6) ((= 55 V2758) 7) ((= 56 V2758) 8) ((= 57 V2758) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2763 V2764) (cond ((= () V2763) 0) ((cons? V2763) (+ (* (shen.expt 10 V2764) (hd V2763)) (shen.pre (tl V2763) (+ V2764 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2769 V2770) (cond ((= () V2769) 0) ((cons? V2769) (+ (* (shen.expt 10 (- 0 V2770)) (hd V2769)) (shen.post (tl V2769) (+ V2770 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2775 V2776) (cond ((= 0 V2776) 1) ((> V2776 0) (* V2775 (shen.expt V2775 (- V2776 1)))) (true (* 1 (/ (shen.expt V2775 (+ V2776 1)) V2775)))))

(defun shen.<st_input1> (V2778) (let Parse_shen.<st_input> (shen.<st_input> V2778) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2780) (let Parse_shen.<st_input> (shen.<st_input> V2780) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2782) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2782) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2782) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2784) (let Parse_shen.<backslash> (shen.<backslash> V2784) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2787) (if (and (cons? (hd V2787)) (= 92 (shen.hdhd V2787))) (let NewStream2785 (shen.pair (shen.tlhd V2787) (shen.hdtl V2787)) (shen.pair (hd NewStream2785) shen.skip)) (fail)))

(defun shen.<anysingle> (V2789) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2789) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2789) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2791) (if (cons? (hd V2791)) (let Parse_X (shen.hdhd V2791) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (shen.tlhd V2791) (shen.hdtl V2791))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2793) (if (cons? (hd V2793)) (let Parse_X (shen.hdhd V2793) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (shen.tlhd V2793) (shen.hdtl V2793))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2795) (let Parse_shen.<backslash> (shen.<backslash> V2795) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2798) (if (and (cons? (hd V2798)) (= 42 (shen.hdhd V2798))) (let NewStream2796 (shen.pair (shen.tlhd V2798) (shen.hdtl V2798)) (shen.pair (hd NewStream2796) shen.skip)) (fail)))

(defun shen.<anymulti> (V2800) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2800) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2800) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2800)) (let Parse_X (shen.hdhd V2800) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (shen.tlhd V2800) (shen.hdtl V2800))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2802) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2802) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2802) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2804) (if (cons? (hd V2804)) (let Parse_X (shen.hdhd V2804) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (shen.tlhd V2804) (shen.hdtl V2804))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2806) (cond ((= () V2806) ()) ((and (cons? V2806) (and (cons? (tl V2806)) (and (cons? (tl (tl V2806))) (and (= () (tl (tl (tl V2806)))) (= (hd (tl V2806)) bar!))))) (cons cons (cons (hd V2806) (tl (tl V2806))))) ((cons? V2806) (cons cons (cons (hd V2806) (cons (shen.cons_form (tl V2806)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2811 V2812) (cond ((and (cons? V2811) (and (= $ (hd V2811)) (and (cons? (tl V2811)) (= () (tl (tl V2811)))))) (append (explode (hd (tl V2811))) V2812)) ((and (cons? V2811) (and (= package (hd V2811)) (and (cons? (tl V2811)) (and (= null (hd (tl V2811))) (cons? (tl (tl V2811))))))) (append (tl (tl (tl V2811))) V2812)) ((and (cons? V2811) (and (= package (hd V2811)) (and (cons? (tl V2811)) (cons? (tl (tl V2811)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2811)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2811))) (let PackageNameDot (intern (cn (str (hd (tl V2811))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2811))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2811)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2812)))))))) (true (cons V2811 V2812))))

(defun shen.record-exceptions (V2815 V2816) (let CurrExceptions (trap-error (get V2816 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V2815 CurrExceptions) (put V2816 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2819 V2820) (put V2819 shen.internal-symbols (union V2820 (trap-error (get V2819 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))

(defun shen.internal-symbols (V2831 V2832) (cond ((and (symbol? V2832) (shen.prefix? V2831 (explode V2832))) (cons V2832 ())) ((cons? V2832) (union (shen.internal-symbols V2831 (hd V2832)) (shen.internal-symbols V2831 (tl V2832)))) (true ())))

(defun shen.packageh (V2849 V2850 V2851 V2852) (cond ((cons? V2851) (cons (shen.packageh V2849 V2850 (hd V2851) V2852) (shen.packageh V2849 V2850 (tl V2851) V2852))) ((or (shen.sysfunc? V2851) (or (variable? V2851) (or (element? V2851 V2850) (or (shen.doubleunderline? V2851) (shen.singleunderline? V2851))))) V2851) ((and (symbol? V2851) (let ExplodeX (explode V2851) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2852 ExplodeX))))) (concat V2849 V2851)) (true V2851)))



