"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.datatype-error (V2858) (cond ((and (cons? V2858) (and (cons? (tl V2858)) (= () (tl (tl V2858))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2858)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2860) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2860) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2860) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2862) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2862) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2862) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2864) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2864) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2864) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2868) (let YaccParse (if (and (cons? (hd V2868)) (= if (shen.hdhd V2868))) (let NewStream2865 (shen.pair (shen.tlhd V2868) (shen.hdtl V2868)) (let Parse_shen.<expr> (shen.<expr> NewStream2865) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail)))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2868)) (= let (shen.hdhd V2868))) (let NewStream2866 (shen.pair (shen.tlhd V2868) (shen.hdtl V2868)) (let Parse_shen.<variable?> (shen.<variable?> NewStream2866) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail)))) (fail)) YaccParse)))

(defun shen.<variable?> (V2870) (if (cons? (hd V2870)) (let Parse_X (shen.hdhd V2870) (if (variable? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2870) (shen.hdtl V2870))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2872) (if (cons? (hd V2872)) (let Parse_X (shen.hdhd V2872) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (shen.tlhd V2872) (shen.hdtl V2872))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2874) (cond ((and (cons? V2874) (and (cons? (tl V2874)) (and (cons? (tl (tl V2874))) (and (= () (tl (tl (tl V2874)))) (= (hd (tl V2874)) bar!))))) (cons (hd V2874) (hd (tl (tl V2874))))) ((cons? V2874) (cons (shen.remove-bar (hd V2874)) (shen.remove-bar (tl V2874)))) (true V2874)))

(defun shen.<premises> (V2876) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2876) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2876) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2878) (if (cons? (hd V2878)) (let Parse_X (shen.hdhd V2878) (if (= Parse_X ;) (shen.pair (hd (shen.pair (shen.tlhd V2878) (shen.hdtl V2878))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2882) (let YaccParse (if (and (cons? (hd V2882)) (= ! (shen.hdhd V2882))) (let NewStream2879 (shen.pair (shen.tlhd V2882) (shen.hdtl V2882)) (shen.pair (hd NewStream2879) !)) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2882) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2880 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2880) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2882) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2885) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2885) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (shen.hdhd Parse_shen.<formulae>))) (let NewStream2883 (shen.pair (shen.tlhd Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formulae>)) (let Parse_shen.<formula> (shen.<formula> NewStream2883) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2885) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2888 V2889) (@p V2888 V2889))

(defun shen.<formulae> (V2891) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2891) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2891) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2891) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2893) (if (cons? (hd V2893)) (let Parse_X (shen.hdhd V2893) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (shen.tlhd V2893) (shen.hdtl V2893))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2896) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2896) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (shen.hdhd Parse_shen.<expr>))) (let NewStream2894 (shen.pair (shen.tlhd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (let Parse_shen.<type> (shen.<type> NewStream2894) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail)))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2896) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2898) (let Parse_shen.<expr> (shen.<expr> V2898) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2900) (if (cons? (hd V2900)) (let Parse_X (shen.hdhd V2900) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2900) (shen.hdtl V2900))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2902) (if (cons? (hd V2902)) (let Parse_X (shen.hdhd V2902) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (shen.tlhd V2902) (shen.hdtl V2902))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2904) (and (symbol? V2904) (shen.sh? (str V2904))))

(defun shen.sh? (V2906) (cond ((= "_" V2906) true) (true (and (= (pos V2906 0) "_") (shen.sh? (tlstr V2906))))))

(defun shen.doubleunderline? (V2908) (and (symbol? V2908) (shen.dh? (str V2908))))

(defun shen.dh? (V2910) (cond ((= "=" V2910) true) (true (and (= (pos V2910 0) "=") (shen.dh? (tlstr V2910))))))

(defun shen.process-datatype (V2913 V2914) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2913 V2914))))

(defun shen.remember-datatype (V2920) (cond ((cons? V2920) (do (set shen.*datatypes* (adjoin (hd V2920) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2920) (value shen.*alldatatypes*))) (hd V2920)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2925 V2926) (cond ((= () V2926) ()) ((and (cons? V2926) (and (tuple? (hd V2926)) (= shen.single (fst (hd V2926))))) (cons (shen.rule->horn-clause V2925 (snd (hd V2926))) (shen.rules->horn-clauses V2925 (tl V2926)))) ((and (cons? V2926) (and (tuple? (hd V2926)) (= shen.double (fst (hd V2926))))) (shen.rules->horn-clauses V2925 (append (shen.double->singles (snd (hd V2926))) (tl V2926)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2928) (cons (shen.right-rule V2928) (cons (shen.left-rule V2928) ())))

(defun shen.right-rule (V2930) (@p shen.single V2930))

(defun shen.left-rule (V2932) (cond ((and (cons? V2932) (and (cons? (tl V2932)) (and (cons? (tl (tl V2932))) (and (tuple? (hd (tl (tl V2932)))) (and (= () (fst (hd (tl (tl V2932))))) (= () (tl (tl (tl V2932))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2932)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2932))) Q) ()) (@p shen.single (cons (hd V2932) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2938) (cond ((and (tuple? V2938) (= () (fst V2938))) (snd V2938)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2941 V2942) (cond ((and (cons? V2942) (and (cons? (tl V2942)) (and (cons? (tl (tl V2942))) (and (tuple? (hd (tl (tl V2942)))) (= () (tl (tl (tl V2942)))))))) (cons (shen.rule->horn-clause-head V2941 (snd (hd (tl (tl V2942))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2942) (hd (tl V2942)) (fst (hd (tl (tl V2942))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2945 V2946) (cons V2945 (cons (shen.mode-ify V2946) (cons Context_1957 ()))))

(defun shen.mode-ify (V2948) (cond ((and (cons? V2948) (and (cons? (tl V2948)) (and (= : (hd (tl V2948))) (and (cons? (tl (tl V2948))) (= () (tl (tl (tl V2948)))))))) (cons mode (cons (cons (hd V2948) (cons : (cons (cons mode (cons (hd (tl (tl V2948))) (cons + ()))) ()))) (cons - ())))) (true V2948)))

(defun shen.rule->horn-clause-body (V2952 V2953 V2954) (let Variables (map (lambda X (shen.extract_vars X)) V2954) (let Predicates (map (lambda X (gensym shen.cl)) V2954) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2954 Variables) (let SideLiterals (shen.construct-side-literals V2952) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2954))) V2953) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2963 V2964 V2965 V2966) (cond ((and (= () V2963) (= () V2964)) ()) (true (shen.csl-help V2963 V2964 V2965 V2966))))

(defun shen.csl-help (V2973 V2974 V2975 V2976) (cond ((and (= () V2973) (= () V2974)) (cons (cons bind (cons ContextOut_1957 (cons V2975 ()))) ())) ((and (cons? V2973) (cons? V2974)) (cons (cons (hd V2973) (cons V2975 (cons V2976 (hd V2974)))) (shen.csl-help (tl V2973) (tl V2974) V2976 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2980 V2981 V2982) (cond ((and (= () V2980) (and (= () V2981) (= () V2982))) shen.skip) ((and (cons? V2980) (and (cons? V2981) (cons? V2982))) (do (shen.construct-search-clause (hd V2980) (hd V2981) (hd V2982)) (shen.construct-search-clauses (tl V2980) (tl V2981) (tl V2982)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2986 V2987 V2988) (shen.s-prolog (cons (shen.construct-base-search-clause V2986 V2987 V2988) (cons (shen.construct-recursive-search-clause V2986 V2987 V2988) ()))))

(defun shen.construct-base-search-clause (V2992 V2993 V2994) (cons (cons V2992 (cons (cons (shen.mode-ify V2993) In_1957) (cons In_1957 V2994))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2998 V2999 V3000) (cons (cons V2998 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V3000))) (cons :- (cons (cons (cons V2998 (cons Assumptions_1957 (cons Out_1957 V3000))) ()) ()))))

(defun shen.construct-side-literals (V3006) (cond ((= () V3006) ()) ((and (cons? V3006) (and (cons? (hd V3006)) (and (= if (hd (hd V3006))) (and (cons? (tl (hd V3006))) (= () (tl (tl (hd V3006)))))))) (cons (cons when (tl (hd V3006))) (shen.construct-side-literals (tl V3006)))) ((and (cons? V3006) (and (cons? (hd V3006)) (and (= let (hd (hd V3006))) (and (cons? (tl (hd V3006))) (and (cons? (tl (tl (hd V3006)))) (= () (tl (tl (tl (hd V3006)))))))))) (cons (cons is (tl (hd V3006))) (shen.construct-side-literals (tl V3006)))) ((cons? V3006) (shen.construct-side-literals (tl V3006))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V3013 V3014) (cond ((tuple? V3013) (cons shen.t* (cons (shen.recursive_cons_form (snd V3013)) (cons (shen.construct-context V3014 (fst V3013)) ())))) ((= ! V3013) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V3017 V3018) (cond ((and (= true V3017) (= () V3018)) Context_1957) ((and (= false V3017) (= () V3018)) ContextOut_1957) ((cons? V3018) (cons cons (cons (shen.recursive_cons_form (hd V3018)) (cons (shen.construct-context V3017 (tl V3018)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V3020) (cond ((cons? V3020) (cons cons (cons (shen.recursive_cons_form (hd V3020)) (cons (shen.recursive_cons_form (tl V3020)) ())))) (true V3020)))

(defun preclude (V3022) (shen.preclude-h (map (lambda X (shen.intern-type X)) V3022)))

(defun shen.preclude-h (V3024) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V3024)) (value shen.*datatypes*)))

(defun include (V3026) (shen.include-h (map (lambda X (shen.intern-type X)) V3026)))

(defun shen.include-h (V3028) (let ValidTypes (intersection V3028 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V3030) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V3030))))

(defun include-all-but (V3032) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V3032))))

(defun shen.synonyms-help (V3038) (cond ((= () V3038) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V3038) (cons? (tl V3038))) (let Vs (difference (shen.extract_vars (hd (tl V3038))) (shen.extract_vars (hd V3038))) (if (empty? Vs) (do (shen.pushnew (cons (hd V3038) (cons (hd (tl V3038)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V3038)))) (shen.free_variable_warnings (hd (tl V3038)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V3041 V3042) (if (element? V3041 (value V3042)) (value V3042) (set V3042 (cons V3041 (value V3042)))))

(defun shen.demod-rule (V3044) (cond ((and (cons? V3044) (and (cons? (tl V3044)) (= () (tl (tl V3044))))) (cons (shen.rcons_form (hd V3044)) (cons -> (cons (shen.rcons_form (hd (tl V3044))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V3050) (cond ((and (cons? V3050) (and (= defun (hd V3050)) (and (cons? (tl V3050)) (and (cons? (tl (tl V3050))) (and (cons? (hd (tl (tl V3050)))) (and (= () (tl (hd (tl (tl V3050))))) (and (cons? (tl (tl (tl V3050)))) (= () (tl (tl (tl (tl V3050)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V3050)))) (tl (tl (tl V3050))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V3053 V3054) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V3054 (shen.default-rule))))))) (do (if V3053 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



