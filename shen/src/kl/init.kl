"Copyright (c) 2010-2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ''AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"

(defun shen.initialise-environment () (do (set shen.*installing-kl* false) (do (set shen.*history* ()) (do (set shen.*tc* false) (do (set *property-vector* (shen.dict 20000)) (do (set shen.*process-counter* 0) (do (set shen.*varcounter* (vector 10000)) (do (set shen.*prologvectors* (vector 10000)) (do (set shen.*demodulation-function* (lambda X X)) (do (set shen.*custom-pattern-compiler* (lambda Arg (lambda OnFail (thaw OnFail)))) (do (set shen.*custom-pattern-reducer* (lambda Arg Arg)) (do (set shen.*macroreg* (cons shen.timer-macro (cons shen.cases-macro (cons shen.abs-macro (cons shen.put/get-macro (cons shen.compile-macro (cons shen.datatype-macro (cons shen.let-macro (cons shen.assoc-macro (cons shen.make-string-macro (cons shen.output-macro (cons shen.input-macro (cons shen.error-macro (cons shen.prolog-macro (cons shen.synonyms-macro (cons shen.nl-macro (cons shen.@s-macro (cons shen.defprolog-macro (cons shen.function-macro ()))))))))))))))))))) (do (set *macros* (cons (lambda X (shen.timer-macro X)) (cons (lambda X (shen.cases-macro X)) (cons (lambda X (shen.abs-macro X)) (cons (lambda X (shen.put/get-macro X)) (cons (lambda X (shen.compile-macro X)) (cons (lambda X (shen.datatype-macro X)) (cons (lambda X (shen.let-macro X)) (cons (lambda X (shen.assoc-macro X)) (cons (lambda X (shen.make-string-macro X)) (cons (lambda X (shen.output-macro X)) (cons (lambda X (shen.input-macro X)) (cons (lambda X (shen.error-macro X)) (cons (lambda X (shen.prolog-macro X)) (cons (lambda X (shen.synonyms-macro X)) (cons (lambda X (shen.nl-macro X)) (cons (lambda X (shen.@s-macro X)) (cons (lambda X (shen.defprolog-macro X)) (cons (lambda X (shen.function-macro X)) ()))))))))))))))))))) (do (set shen.*gensym* 0) (do (set shen.*tracking* ()) (do (set shen.*alphabet* (cons A (cons B (cons C (cons D (cons E (cons F (cons G (cons H (cons I (cons J (cons K (cons L (cons M (cons N (cons O (cons P (cons Q (cons R (cons S (cons T (cons U (cons V (cons W (cons X (cons Y (cons Z ()))))))))))))))))))))))))))) (do (set shen.*special* (cons @p (cons @s (cons @v (cons cons (cons lambda (cons let (cons where (cons set (cons open ())))))))))) (do (set shen.*extraspecial* (cons define (cons shen.process-datatype (cons input+ (cons defcc (cons shen.read+ (cons defmacro ()))))))) (do (set shen.*spy* false) (do (set shen.*datatypes* ()) (do (set shen.*alldatatypes* ()) (do (set shen.*shen-type-theory-enabled?* true) (do (set shen.*synonyms* ()) (do (set shen.*system* ()) (do (set shen.*maxcomplexity* 128) (do (set shen.*occurs* true) (do (set shen.*maxinferences* 1000000) (do (set *maximum-print-sequence-size* 20) (do (set shen.*catch* 0) (do (set shen.*call* 0) (do (set shen.*infs* 0) (do (set *hush* false) (do (set shen.*optimise* false) (do (set *version* "Shen 22.4") (do (if (not (bound? *home-directory*)) (set *home-directory* "") shen.skip) (do (if (not (bound? *sterror*)) (set *sterror* (value *stoutput*)) shen.skip) (do (shen.initialise_arity_table (cons abort (cons 0 (cons absvector? (cons 1 (cons absvector (cons 1 (cons adjoin (cons 2 (cons and (cons 2 (cons append (cons 2 (cons arity (cons 1 (cons assoc (cons 2 (cons boolean? (cons 1 (cons bound? (cons 1 (cons cd (cons 1 (cons close (cons 1 (cons compile (cons 3 (cons concat (cons 2 (cons cons (cons 2 (cons cons? (cons 1 (cons cn (cons 2 (cons declare (cons 2 (cons destroy (cons 1 (cons difference (cons 2 (cons do (cons 2 (cons element? (cons 2 (cons empty? (cons 1 (cons enable-type-theory (cons 1 (cons error-to-string (cons 1 (cons shen.interror (cons 2 (cons eval (cons 1 (cons eval-kl (cons 1 (cons explode (cons 1 (cons external (cons 1 (cons fail-if (cons 2 (cons fail (cons 0 (cons fix (cons 2 (cons findall (cons 5 (cons freeze (cons 1 (cons fst (cons 1 (cons gensym (cons 1 (cons get (cons 3 (cons get-time (cons 1 (cons address-> (cons 3 (cons <-address (cons 2 (cons <-vector (cons 2 (cons > (cons 2 (cons >= (cons 2 (cons = (cons 2 (cons hash (cons 2 (cons hd (cons 1 (cons hdv (cons 1 (cons hdstr (cons 1 (cons head (cons 1 (cons if (cons 3 (cons integer? (cons 1 (cons intern (cons 1 (cons identical (cons 4 (cons inferences (cons 0 (cons input (cons 1 (cons input+ (cons 2 (cons implementation (cons 0 (cons intersection (cons 2 (cons internal (cons 1 (cons it (cons 0 (cons kill (cons 0 (cons language (cons 0 (cons length (cons 1 (cons limit (cons 1 (cons lineread (cons 1 (cons load (cons 1 (cons < (cons 2 (cons <= (cons 2 (cons vector (cons 1 (cons macroexpand (cons 1 (cons map (cons 2 (cons mapcan (cons 2 (cons maxinferences (cons 1 (cons nl (cons 1 (cons not (cons 1 (cons nth (cons 2 (cons n->string (cons 1 (cons number? (cons 1 (cons occurs-check (cons 1 (cons occurrences (cons 2 (cons occurs-check (cons 1 (cons open (cons 2 (cons optimise (cons 1 (cons or (cons 2 (cons os (cons 0 (cons package (cons 3 (cons package? (cons 1 (cons port (cons 0 (cons porters (cons 0 (cons pos (cons 2 (cons print (cons 1 (cons profile (cons 1 (cons profile-results (cons 1 (cons pr (cons 2 (cons ps (cons 1 (cons preclude (cons 1 (cons preclude-all-but (cons 1 (cons protect (cons 1 (cons address-> (cons 3 (cons put (cons 4 (cons shen.reassemble (cons 2 (cons read-file-as-string (cons 1 (cons read-file (cons 1 (cons read-file-as-bytelist (cons 1 (cons read (cons 1 (cons read-byte (cons 1 (cons read-from-string (cons 1 (cons receive (cons 1 (cons release (cons 0 (cons remove (cons 2 (cons shen.require (cons 3 (cons reverse (cons 1 (cons set (cons 2 (cons simple-error (cons 1 (cons snd (cons 1 (cons specialise (cons 1 (cons spy (cons 1 (cons step (cons 1 (cons stinput (cons 0 (cons stoutput (cons 0 (cons sterror (cons 0 (cons string->n (cons 1 (cons string->symbol (cons 1 (cons string? (cons 1 (cons str (cons 1 (cons subst (cons 3 (cons sum (cons 1 (cons symbol? (cons 1 (cons systemf (cons 1 (cons tail (cons 1 (cons tl (cons 1 (cons tc (cons 1 (cons tc? (cons 0 (cons thaw (cons 1 (cons tlstr (cons 1 (cons track (cons 1 (cons trap-error (cons 2 (cons tuple? (cons 1 (cons type (cons 2 (cons return (cons 3 (cons undefmacro (cons 1 (cons unput (cons 3 (cons unprofile (cons 1 (cons unify (cons 4 (cons unify! (cons 4 (cons union (cons 2 (cons untrack (cons 1 (cons unspecialise (cons 1 (cons undefmacro (cons 1 (cons vector (cons 1 (cons vector? (cons 1 (cons vector-> (cons 3 (cons value (cons 1 (cons variable? (cons 1 (cons version (cons 0 (cons write-byte (cons 2 (cons write-to-file (cons 2 (cons y-or-n? (cons 1 (cons + (cons 2 (cons * (cons 2 (cons / (cons 2 (cons - (cons 2 (cons == (cons 2 (cons <e> (cons 1 (cons <!> (cons 1 (cons @p (cons 2 (cons @v (cons 2 (cons @s (cons 2 (cons preclude (cons 1 (cons include (cons 1 (cons preclude-all-but (cons 1 (cons include-all-but (cons 1 ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (do (put (intern "shen") shen.external-symbols (cons ! (cons } (cons { (cons --> (cons <-- (cons && (cons : (cons ; (cons :- (cons := (cons _ (cons , (cons *language* (cons *implementation* (cons *stinput* (cons *stoutput* (cons *sterror* (cons *home-directory* (cons *version* (cons *maximum-print-sequence-size* (cons *macros* (cons *os* (cons *release* (cons *property-vector* (cons *port* (cons *porters* (cons *hush* (cons @v (cons @p (cons @s (cons <- (cons -> (cons <e> (cons <!> (cons == (cons = (cons >= (cons > (cons /. (cons =! (cons $ (cons - (cons / (cons * (cons + (cons <= (cons < (cons >> (cons y-or-n? (cons write-to-file (cons write-byte (cons where (cons when (cons warn (cons version (cons verified (cons variable? (cons value (cons vector-> (cons <-vector (cons vector (cons vector? (cons unspecialise (cons untrack (cons unit (cons shen.unix (cons union (cons unify (cons unify! (cons unput (cons unprofile (cons undefmacro (cons return (cons type (cons tuple? (cons true (cons trap-error (cons track (cons time (cons thaw (cons tc? (cons tc (cons tl (cons tlstr (cons tlv (cons tail (cons systemf (cons synonyms (cons symbol (cons symbol? (cons string->symbol (cons sum (cons subst (cons string? (cons string->n (cons stream (cons string (cons stinput (cons sterror (cons stoutput (cons step (cons spy (cons specialise (cons snd (cons simple-error (cons set (cons save (cons str (cons run (cons reverse (cons remove (cons release (cons read (cons receive (cons read-file (cons read-file-as-bytelist (cons read-file-as-string (cons read-byte (cons read-from-string (cons package? (cons put (cons preclude (cons preclude-all-but (cons ps (cons prolog? (cons protect (cons profile-results (cons profile (cons print (cons pr (cons pos (cons porters (cons port (cons package (cons output (cons out (cons os (cons or (cons optimise (cons open (cons occurrences (cons occurs-check (cons n->string (cons number? (cons number (cons null (cons nth (cons not (cons nl (cons mode (cons macroexpand (cons maxinferences (cons mapcan (cons map (cons make-string (cons load (cons loaded (cons list (cons lineread (cons limit (cons length (cons let (cons lazy (cons lambda (cons language (cons kill (cons is (cons intersection (cons inferences (cons intern (cons integer? (cons input (cons input+ (cons include (cons include-all-but (cons it (cons in (cons internal (cons implementation (cons if (cons identical (cons head (cons hd (cons hdv (cons hdstr (cons hash (cons get (cons get-time (cons gensym (cons function (cons fst (cons freeze (cons fix (cons file (cons fail (cons fail-if (cons fwhen (cons findall (cons false (cons enable-type-theory (cons explode (cons external (cons exception (cons eval-kl (cons eval (cons error-to-string (cons error (cons empty? (cons element? (cons do (cons difference (cons destroy (cons defun (cons define (cons defmacro (cons defcc (cons defprolog (cons declare (cons datatype (cons cut (cons cn (cons cons? (cons cons (cons cond (cons concat (cons compile (cons cd (cons cases (cons call (cons close (cons bind (cons bound? (cons boolean? (cons boolean (cons bar! (cons assoc (cons arity (cons abort (cons append (cons and (cons adjoin (cons <-address (cons address-> (cons absvector? (cons absvector ()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (value *property-vector*)) (do (set shen.*history* ()) (do (set shen.*step* false) (set shen.*empty-absvector* (absvector 0))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfuncs () (do (set shen.*signedfuncs* ()) (do (set shen.*signedfuncs* (cons (cons absvector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons adjoin (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons and (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.app (cons A (cons --> (cons (cons string (cons --> (cons (cons symbol (cons --> (cons string ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons append (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons arity (cons A (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons assoc (cons A (cons --> (cons (cons (cons list (cons (cons list (cons A ())) ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons boolean? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons bound? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cd (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons close (cons (cons stream (cons A ())) (cons --> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cn (cons string (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons compile (cons (cons A (cons shen.==> (cons B ()))) (cons --> (cons (cons A (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons --> (cons B ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons cons? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons destroy (cons (cons A (cons --> (cons B ()))) (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons difference (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons do (cons A (cons --> (cons (cons B (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <e> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons B ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <!> (cons (cons list (cons A ())) (cons shen.==> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons element? (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons empty? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons enable-type-theory (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons external (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons error-to-string (cons exception (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons explode (cons A (cons --> (cons (cons list (cons string ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail (cons --> (cons symbol ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fail-if (cons (cons symbol (cons --> (cons boolean ()))) (cons --> (cons (cons symbol (cons --> (cons symbol ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fix (cons (cons A (cons --> (cons A ()))) (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons freeze (cons A (cons --> (cons (cons lazy (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons fst (cons (cons A (cons * (cons B ()))) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons function (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons gensym (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <-vector (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector-> (cons (cons vector (cons A ())) (cons --> (cons (cons number (cons --> (cons (cons A (cons --> (cons (cons vector (cons A ())) ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector (cons number (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons get-time (cons symbol (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hash (cons A (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons head (cons (cons list (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdv (cons (cons vector (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons hdstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons if (cons boolean (cons --> (cons (cons A (cons --> (cons (cons A (cons --> (cons A ()))) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons it (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons implementation (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons include-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons inferences (cons --> (cons number ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.insert (cons A (cons --> (cons (cons string (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons integer? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons internal (cons symbol (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons intersection (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons kill (cons --> (cons A ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons language (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons length (cons (cons list (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons limit (cons (cons vector (cons A ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons load (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons map (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons mapcan (cons (cons A (cons --> (cons (cons list (cons B ())) ()))) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons B ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons maxinferences (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons n->string (cons number (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nl (cons number (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons not (cons boolean (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons nth (cons number (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons number? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurrences (cons A (cons --> (cons (cons B (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons occurs-check (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons optimise (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons or (cons boolean (cons --> (cons (cons boolean (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons os (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons package? (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons port (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons porters (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pos (cons string (cons --> (cons (cons number (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons pr (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons print (cons A (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.proc-nl (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons profile-results (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons (cons A (cons --> (cons B ()))) (cons * (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons protect (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons preclude-all-but (cons (cons list (cons symbol ())) (cons --> (cons (cons list (cons symbol ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons shen.prhush (cons string (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons string ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons ps (cons symbol (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read (cons (cons stream (cons in ())) (cons --> (cons unit ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-byte (cons (cons stream (cons in ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-bytelist (cons string (cons --> (cons (cons list (cons number ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file-as-string (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-file (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons read-from-string (cons string (cons --> (cons (cons list (cons unit ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons release (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons remove (cons A (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons reverse (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons simple-error (cons string (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons snd (cons (cons A (cons * (cons B ()))) (cons --> (cons B ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons specialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons spy (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons step (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stinput (cons --> (cons (cons stream (cons in ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sterror (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons stoutput (cons --> (cons (cons stream (cons out ())) ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons str (cons A (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->n (cons string (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons string->symbol (cons string (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons sum (cons (cons list (cons number ())) (cons --> (cons number ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons symbol? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons systemf (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tail (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlstr (cons string (cons --> (cons string ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tlv (cons (cons vector (cons A ())) (cons --> (cons (cons vector (cons A ())) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc (cons symbol (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tc? (cons --> (cons boolean ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons thaw (cons (cons lazy (cons A ())) (cons --> (cons A ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons track (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons trap-error (cons A (cons --> (cons (cons (cons exception (cons --> (cons A ()))) (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons tuple? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons undefmacro (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons union (cons (cons list (cons A ())) (cons --> (cons (cons (cons list (cons A ())) (cons --> (cons (cons list (cons A ())) ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unprofile (cons (cons A (cons --> (cons B ()))) (cons --> (cons (cons A (cons --> (cons B ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons untrack (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons unspecialise (cons symbol (cons --> (cons symbol ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons variable? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons vector? (cons A (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons version (cons --> (cons string ()))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-to-file (cons string (cons --> (cons (cons A (cons --> (cons A ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons write-byte (cons number (cons --> (cons (cons (cons stream (cons out ())) (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons y-or-n? (cons string (cons --> (cons boolean ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons > (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons < (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons >= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons <= (cons number (cons --> (cons (cons number (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons = (cons A (cons --> (cons (cons A (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons + (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons / (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons - (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (do (set shen.*signedfuncs* (cons (cons * (cons number (cons --> (cons (cons number (cons --> (cons number ()))) ())))) (value shen.*signedfuncs*))) (set shen.*signedfuncs* (cons (cons == (cons A (cons --> (cons (cons B (cons --> (cons boolean ()))) ())))) (value shen.*signedfuncs*))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-signedfunc-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.type-signature-of-absvector? (lambda V4375 (lambda V4376 (lambda V4377 (shen.type-signature-of-absvector? V4375 V4376 V4377)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-adjoin (lambda V4385 (lambda V4386 (lambda V4387 (shen.type-signature-of-adjoin V4385 V4386 V4387)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-and (lambda V4395 (lambda V4396 (lambda V4397 (shen.type-signature-of-and V4395 V4396 V4397)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.app (lambda V4405 (lambda V4406 (lambda V4407 (shen.type-signature-of-shen.app V4405 V4406 V4407)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-append (lambda V4415 (lambda V4416 (lambda V4417 (shen.type-signature-of-append V4415 V4416 V4417)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-arity (lambda V4425 (lambda V4426 (lambda V4427 (shen.type-signature-of-arity V4425 V4426 V4427)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-assoc (lambda V4435 (lambda V4436 (lambda V4437 (shen.type-signature-of-assoc V4435 V4436 V4437)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-boolean? (lambda V4445 (lambda V4446 (lambda V4447 (shen.type-signature-of-boolean? V4445 V4446 V4447)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-bound? (lambda V4455 (lambda V4456 (lambda V4457 (shen.type-signature-of-bound? V4455 V4456 V4457)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cd (lambda V4465 (lambda V4466 (lambda V4467 (shen.type-signature-of-cd V4465 V4466 V4467)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-close (lambda V4475 (lambda V4476 (lambda V4477 (shen.type-signature-of-close V4475 V4476 V4477)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cn (lambda V4485 (lambda V4486 (lambda V4487 (shen.type-signature-of-cn V4485 V4486 V4487)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-compile (lambda V4495 (lambda V4496 (lambda V4497 (shen.type-signature-of-compile V4495 V4496 V4497)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-cons? (lambda V4505 (lambda V4506 (lambda V4507 (shen.type-signature-of-cons? V4505 V4506 V4507)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-destroy (lambda V4515 (lambda V4516 (lambda V4517 (shen.type-signature-of-destroy V4515 V4516 V4517)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-difference (lambda V4525 (lambda V4526 (lambda V4527 (shen.type-signature-of-difference V4525 V4526 V4527)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-do (lambda V4535 (lambda V4536 (lambda V4537 (shen.type-signature-of-do V4535 V4536 V4537)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<e> (lambda V4545 (lambda V4546 (lambda V4547 (shen.type-signature-of-<e> V4545 V4546 V4547)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<!> (lambda V4555 (lambda V4556 (lambda V4557 (shen.type-signature-of-<!> V4555 V4556 V4557)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-element? (lambda V4565 (lambda V4566 (lambda V4567 (shen.type-signature-of-element? V4565 V4566 V4567)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-empty? (lambda V4575 (lambda V4576 (lambda V4577 (shen.type-signature-of-empty? V4575 V4576 V4577)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-enable-type-theory (lambda V4585 (lambda V4586 (lambda V4587 (shen.type-signature-of-enable-type-theory V4585 V4586 V4587)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-external (lambda V4595 (lambda V4596 (lambda V4597 (shen.type-signature-of-external V4595 V4596 V4597)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-error-to-string (lambda V4605 (lambda V4606 (lambda V4607 (shen.type-signature-of-error-to-string V4605 V4606 V4607)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-explode (lambda V4615 (lambda V4616 (lambda V4617 (shen.type-signature-of-explode V4615 V4616 V4617)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail (lambda V4625 (lambda V4626 (lambda V4627 (shen.type-signature-of-fail V4625 V4626 V4627)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fail-if (lambda V4635 (lambda V4636 (lambda V4637 (shen.type-signature-of-fail-if V4635 V4636 V4637)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fix (lambda V4645 (lambda V4646 (lambda V4647 (shen.type-signature-of-fix V4645 V4646 V4647)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-freeze (lambda V4655 (lambda V4656 (lambda V4657 (shen.type-signature-of-freeze V4655 V4656 V4657)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-fst (lambda V4665 (lambda V4666 (lambda V4667 (shen.type-signature-of-fst V4665 V4666 V4667)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-function (lambda V4675 (lambda V4676 (lambda V4677 (shen.type-signature-of-function V4675 V4676 V4677)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-gensym (lambda V4685 (lambda V4686 (lambda V4687 (shen.type-signature-of-gensym V4685 V4686 V4687)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<-vector (lambda V4695 (lambda V4696 (lambda V4697 (shen.type-signature-of-<-vector V4695 V4696 V4697)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector-> (lambda V4705 (lambda V4706 (lambda V4707 (shen.type-signature-of-vector-> V4705 V4706 V4707)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector (lambda V4715 (lambda V4716 (lambda V4717 (shen.type-signature-of-vector V4715 V4716 V4717)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-get-time (lambda V4725 (lambda V4726 (lambda V4727 (shen.type-signature-of-get-time V4725 V4726 V4727)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hash (lambda V4735 (lambda V4736 (lambda V4737 (shen.type-signature-of-hash V4735 V4736 V4737)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-head (lambda V4745 (lambda V4746 (lambda V4747 (shen.type-signature-of-head V4745 V4746 V4747)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdv (lambda V4755 (lambda V4756 (lambda V4757 (shen.type-signature-of-hdv V4755 V4756 V4757)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-hdstr (lambda V4765 (lambda V4766 (lambda V4767 (shen.type-signature-of-hdstr V4765 V4766 V4767)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-if (lambda V4775 (lambda V4776 (lambda V4777 (shen.type-signature-of-if V4775 V4776 V4777)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-it (lambda V4785 (lambda V4786 (lambda V4787 (shen.type-signature-of-it V4785 V4786 V4787)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-implementation (lambda V4795 (lambda V4796 (lambda V4797 (shen.type-signature-of-implementation V4795 V4796 V4797)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include (lambda V4805 (lambda V4806 (lambda V4807 (shen.type-signature-of-include V4805 V4806 V4807)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-include-all-but (lambda V4815 (lambda V4816 (lambda V4817 (shen.type-signature-of-include-all-but V4815 V4816 V4817)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-inferences (lambda V4825 (lambda V4826 (lambda V4827 (shen.type-signature-of-inferences V4825 V4826 V4827)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.insert (lambda V4835 (lambda V4836 (lambda V4837 (shen.type-signature-of-shen.insert V4835 V4836 V4837)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-integer? (lambda V4845 (lambda V4846 (lambda V4847 (shen.type-signature-of-integer? V4845 V4846 V4847)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-internal (lambda V4855 (lambda V4856 (lambda V4857 (shen.type-signature-of-internal V4855 V4856 V4857)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-intersection (lambda V4865 (lambda V4866 (lambda V4867 (shen.type-signature-of-intersection V4865 V4866 V4867)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-kill (lambda V4875 (lambda V4876 (lambda V4877 (shen.type-signature-of-kill V4875 V4876 V4877)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-language (lambda V4885 (lambda V4886 (lambda V4887 (shen.type-signature-of-language V4885 V4886 V4887)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-length (lambda V4895 (lambda V4896 (lambda V4897 (shen.type-signature-of-length V4895 V4896 V4897)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-limit (lambda V4905 (lambda V4906 (lambda V4907 (shen.type-signature-of-limit V4905 V4906 V4907)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-load (lambda V4915 (lambda V4916 (lambda V4917 (shen.type-signature-of-load V4915 V4916 V4917)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-map (lambda V4925 (lambda V4926 (lambda V4927 (shen.type-signature-of-map V4925 V4926 V4927)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-mapcan (lambda V4935 (lambda V4936 (lambda V4937 (shen.type-signature-of-mapcan V4935 V4936 V4937)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-maxinferences (lambda V4945 (lambda V4946 (lambda V4947 (shen.type-signature-of-maxinferences V4945 V4946 V4947)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-n->string (lambda V4955 (lambda V4956 (lambda V4957 (shen.type-signature-of-n->string V4955 V4956 V4957)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nl (lambda V4965 (lambda V4966 (lambda V4967 (shen.type-signature-of-nl V4965 V4966 V4967)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-not (lambda V4975 (lambda V4976 (lambda V4977 (shen.type-signature-of-not V4975 V4976 V4977)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-nth (lambda V4985 (lambda V4986 (lambda V4987 (shen.type-signature-of-nth V4985 V4986 V4987)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-number? (lambda V4995 (lambda V4996 (lambda V4997 (shen.type-signature-of-number? V4995 V4996 V4997)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurrences (lambda V5005 (lambda V5006 (lambda V5007 (shen.type-signature-of-occurrences V5005 V5006 V5007)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-occurs-check (lambda V5015 (lambda V5016 (lambda V5017 (shen.type-signature-of-occurs-check V5015 V5016 V5017)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-optimise (lambda V5025 (lambda V5026 (lambda V5027 (shen.type-signature-of-optimise V5025 V5026 V5027)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-or (lambda V5035 (lambda V5036 (lambda V5037 (shen.type-signature-of-or V5035 V5036 V5037)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-os (lambda V5045 (lambda V5046 (lambda V5047 (shen.type-signature-of-os V5045 V5046 V5047)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-package? (lambda V5055 (lambda V5056 (lambda V5057 (shen.type-signature-of-package? V5055 V5056 V5057)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-port (lambda V5065 (lambda V5066 (lambda V5067 (shen.type-signature-of-port V5065 V5066 V5067)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-porters (lambda V5075 (lambda V5076 (lambda V5077 (shen.type-signature-of-porters V5075 V5076 V5077)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pos (lambda V5085 (lambda V5086 (lambda V5087 (shen.type-signature-of-pos V5085 V5086 V5087)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-pr (lambda V5095 (lambda V5096 (lambda V5097 (shen.type-signature-of-pr V5095 V5096 V5097)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-print (lambda V5105 (lambda V5106 (lambda V5107 (shen.type-signature-of-print V5105 V5106 V5107)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile (lambda V5115 (lambda V5116 (lambda V5117 (shen.type-signature-of-profile V5115 V5116 V5117)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude (lambda V5125 (lambda V5126 (lambda V5127 (shen.type-signature-of-preclude V5125 V5126 V5127)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.proc-nl (lambda V5135 (lambda V5136 (lambda V5137 (shen.type-signature-of-shen.proc-nl V5135 V5136 V5137)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-profile-results (lambda V5145 (lambda V5146 (lambda V5147 (shen.type-signature-of-profile-results V5145 V5146 V5147)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-protect (lambda V5155 (lambda V5156 (lambda V5157 (shen.type-signature-of-protect V5155 V5156 V5157)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-preclude-all-but (lambda V5165 (lambda V5166 (lambda V5167 (shen.type-signature-of-preclude-all-but V5165 V5166 V5167)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-shen.prhush (lambda V5175 (lambda V5176 (lambda V5177 (shen.type-signature-of-shen.prhush V5175 V5176 V5177)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-ps (lambda V5185 (lambda V5186 (lambda V5187 (shen.type-signature-of-ps V5185 V5186 V5187)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read (lambda V5195 (lambda V5196 (lambda V5197 (shen.type-signature-of-read V5195 V5196 V5197)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-byte (lambda V5205 (lambda V5206 (lambda V5207 (shen.type-signature-of-read-byte V5205 V5206 V5207)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-bytelist (lambda V5215 (lambda V5216 (lambda V5217 (shen.type-signature-of-read-file-as-bytelist V5215 V5216 V5217)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file-as-string (lambda V5225 (lambda V5226 (lambda V5227 (shen.type-signature-of-read-file-as-string V5225 V5226 V5227)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-file (lambda V5235 (lambda V5236 (lambda V5237 (shen.type-signature-of-read-file V5235 V5236 V5237)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-read-from-string (lambda V5245 (lambda V5246 (lambda V5247 (shen.type-signature-of-read-from-string V5245 V5246 V5247)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-release (lambda V5255 (lambda V5256 (lambda V5257 (shen.type-signature-of-release V5255 V5256 V5257)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-remove (lambda V5265 (lambda V5266 (lambda V5267 (shen.type-signature-of-remove V5265 V5266 V5267)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-reverse (lambda V5275 (lambda V5276 (lambda V5277 (shen.type-signature-of-reverse V5275 V5276 V5277)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-simple-error (lambda V5285 (lambda V5286 (lambda V5287 (shen.type-signature-of-simple-error V5285 V5286 V5287)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-snd (lambda V5295 (lambda V5296 (lambda V5297 (shen.type-signature-of-snd V5295 V5296 V5297)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-specialise (lambda V5305 (lambda V5306 (lambda V5307 (shen.type-signature-of-specialise V5305 V5306 V5307)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-spy (lambda V5315 (lambda V5316 (lambda V5317 (shen.type-signature-of-spy V5315 V5316 V5317)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-step (lambda V5325 (lambda V5326 (lambda V5327 (shen.type-signature-of-step V5325 V5326 V5327)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stinput (lambda V5335 (lambda V5336 (lambda V5337 (shen.type-signature-of-stinput V5335 V5336 V5337)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sterror (lambda V5345 (lambda V5346 (lambda V5347 (shen.type-signature-of-sterror V5345 V5346 V5347)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-stoutput (lambda V5355 (lambda V5356 (lambda V5357 (shen.type-signature-of-stoutput V5355 V5356 V5357)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string? (lambda V5365 (lambda V5366 (lambda V5367 (shen.type-signature-of-string? V5365 V5366 V5367)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-str (lambda V5375 (lambda V5376 (lambda V5377 (shen.type-signature-of-str V5375 V5376 V5377)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->n (lambda V5385 (lambda V5386 (lambda V5387 (shen.type-signature-of-string->n V5385 V5386 V5387)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-string->symbol (lambda V5395 (lambda V5396 (lambda V5397 (shen.type-signature-of-string->symbol V5395 V5396 V5397)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-sum (lambda V5405 (lambda V5406 (lambda V5407 (shen.type-signature-of-sum V5405 V5406 V5407)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-symbol? (lambda V5415 (lambda V5416 (lambda V5417 (shen.type-signature-of-symbol? V5415 V5416 V5417)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-systemf (lambda V5425 (lambda V5426 (lambda V5427 (shen.type-signature-of-systemf V5425 V5426 V5427)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tail (lambda V5435 (lambda V5436 (lambda V5437 (shen.type-signature-of-tail V5435 V5436 V5437)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlstr (lambda V5445 (lambda V5446 (lambda V5447 (shen.type-signature-of-tlstr V5445 V5446 V5447)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tlv (lambda V5455 (lambda V5456 (lambda V5457 (shen.type-signature-of-tlv V5455 V5456 V5457)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc (lambda V5465 (lambda V5466 (lambda V5467 (shen.type-signature-of-tc V5465 V5466 V5467)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tc? (lambda V5475 (lambda V5476 (lambda V5477 (shen.type-signature-of-tc? V5475 V5476 V5477)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-thaw (lambda V5485 (lambda V5486 (lambda V5487 (shen.type-signature-of-thaw V5485 V5486 V5487)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-track (lambda V5495 (lambda V5496 (lambda V5497 (shen.type-signature-of-track V5495 V5496 V5497)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-trap-error (lambda V5505 (lambda V5506 (lambda V5507 (shen.type-signature-of-trap-error V5505 V5506 V5507)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-tuple? (lambda V5515 (lambda V5516 (lambda V5517 (shen.type-signature-of-tuple? V5515 V5516 V5517)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-undefmacro (lambda V5525 (lambda V5526 (lambda V5527 (shen.type-signature-of-undefmacro V5525 V5526 V5527)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-union (lambda V5535 (lambda V5536 (lambda V5537 (shen.type-signature-of-union V5535 V5536 V5537)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unprofile (lambda V5545 (lambda V5546 (lambda V5547 (shen.type-signature-of-unprofile V5545 V5546 V5547)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-untrack (lambda V5555 (lambda V5556 (lambda V5557 (shen.type-signature-of-untrack V5555 V5556 V5557)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-unspecialise (lambda V5565 (lambda V5566 (lambda V5567 (shen.type-signature-of-unspecialise V5565 V5566 V5567)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-variable? (lambda V5575 (lambda V5576 (lambda V5577 (shen.type-signature-of-variable? V5575 V5576 V5577)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-vector? (lambda V5585 (lambda V5586 (lambda V5587 (shen.type-signature-of-vector? V5585 V5586 V5587)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-version (lambda V5595 (lambda V5596 (lambda V5597 (shen.type-signature-of-version V5595 V5596 V5597)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-to-file (lambda V5605 (lambda V5606 (lambda V5607 (shen.type-signature-of-write-to-file V5605 V5606 V5607)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-write-byte (lambda V5615 (lambda V5616 (lambda V5617 (shen.type-signature-of-write-byte V5615 V5616 V5617)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-y-or-n? (lambda V5625 (lambda V5626 (lambda V5627 (shen.type-signature-of-y-or-n? V5625 V5626 V5627)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-> (lambda V5635 (lambda V5636 (lambda V5637 (shen.type-signature-of-> V5635 V5636 V5637)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-< (lambda V5645 (lambda V5646 (lambda V5647 (shen.type-signature-of-< V5645 V5646 V5647)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of->= (lambda V5655 (lambda V5656 (lambda V5657 (shen.type-signature-of->= V5655 V5656 V5657)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-<= (lambda V5665 (lambda V5666 (lambda V5667 (shen.type-signature-of-<= V5665 V5666 V5667)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-= (lambda V5675 (lambda V5676 (lambda V5677 (shen.type-signature-of-= V5675 V5676 V5677)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-+ (lambda V5685 (lambda V5686 (lambda V5687 (shen.type-signature-of-+ V5685 V5686 V5687)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-/ (lambda V5695 (lambda V5696 (lambda V5697 (shen.type-signature-of-/ V5695 V5696 V5697)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-- (lambda V5705 (lambda V5706 (lambda V5707 (shen.type-signature-of-- V5705 V5706 V5707)))))) (do (shen.set-lambda-form-entry (cons shen.type-signature-of-* (lambda V5715 (lambda V5716 (lambda V5717 (shen.type-signature-of-* V5715 V5716 V5717)))))) (shen.set-lambda-form-entry (cons shen.type-signature-of-== (lambda V5725 (lambda V5726 (lambda V5727 (shen.type-signature-of-== V5725 V5726 V5727))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise-lambda-forms () (do (shen.set-lambda-form-entry (cons shen.datatype-error (lambda X (shen.datatype-error X)))) (do (shen.set-lambda-form-entry (cons shen.tuple (lambda X (shen.tuple X)))) (do (shen.set-lambda-form-entry (cons shen.pvar (lambda X (shen.pvar X)))) (do (shen.set-lambda-form-entry (cons shen.dictionary (lambda X (shen.dictionary X)))) (do (shen.set-lambda-form-entry (cons @v (lambda V1612 (lambda V1613 (@v V1612 V1613))))) (do (shen.set-lambda-form-entry (cons @p (lambda V1614 (lambda V1615 (@p V1614 V1615))))) (do (shen.set-lambda-form-entry (cons @s (lambda V1616 (lambda V1617 (@s V1616 V1617))))) (do (shen.set-lambda-form-entry (cons <e> (lambda V1618 (<e> V1618)))) (do (shen.set-lambda-form-entry (cons <!> (lambda V1619 (<!> V1619)))) (do (shen.set-lambda-form-entry (cons == (lambda V1620 (lambda V1621 (== V1620 V1621))))) (do (shen.set-lambda-form-entry (cons = (lambda V1622 (lambda V1623 (= V1622 V1623))))) (do (shen.set-lambda-form-entry (cons >= (lambda V1624 (lambda V1625 (>= V1624 V1625))))) (do (shen.set-lambda-form-entry (cons > (lambda V1626 (lambda V1627 (> V1626 V1627))))) (do (shen.set-lambda-form-entry (cons - (lambda V1628 (lambda V1629 (- V1628 V1629))))) (do (shen.set-lambda-form-entry (cons / (lambda V1630 (lambda V1631 (/ V1630 V1631))))) (do (shen.set-lambda-form-entry (cons * (lambda V1632 (lambda V1633 (* V1632 V1633))))) (do (shen.set-lambda-form-entry (cons + (lambda V1634 (lambda V1635 (+ V1634 V1635))))) (do (shen.set-lambda-form-entry (cons <= (lambda V1636 (lambda V1637 (<= V1636 V1637))))) (do (shen.set-lambda-form-entry (cons < (lambda V1638 (lambda V1639 (< V1638 V1639))))) (do (shen.set-lambda-form-entry (cons y-or-n? (lambda V1640 (y-or-n? V1640)))) (do (shen.set-lambda-form-entry (cons write-to-file (lambda V1641 (lambda V1642 (write-to-file V1641 V1642))))) (do (shen.set-lambda-form-entry (cons write-byte (lambda V1643 (lambda V1644 (write-byte V1643 V1644))))) (do (shen.set-lambda-form-entry (cons variable? (lambda V1645 (variable? V1645)))) (do (shen.set-lambda-form-entry (cons value (lambda V1646 (value V1646)))) (do (shen.set-lambda-form-entry (cons vector-> (lambda V1647 (lambda V1648 (lambda V1649 (vector-> V1647 V1648 V1649)))))) (do (shen.set-lambda-form-entry (cons <-vector (lambda V1650 (lambda V1651 (<-vector V1650 V1651))))) (do (shen.set-lambda-form-entry (cons vector (lambda V1652 (vector V1652)))) (do (shen.set-lambda-form-entry (cons vector? (lambda V1653 (vector? V1653)))) (do (shen.set-lambda-form-entry (cons unspecialise (lambda V1654 (unspecialise V1654)))) (do (shen.set-lambda-form-entry (cons untrack (lambda V1655 (untrack V1655)))) (do (shen.set-lambda-form-entry (cons union (lambda V1656 (lambda V1657 (union V1656 V1657))))) (do (shen.set-lambda-form-entry (cons unify (lambda V1658 (lambda V1659 (lambda V1660 (lambda V1661 (unify V1658 V1659 V1660 V1661))))))) (do (shen.set-lambda-form-entry (cons unify! (lambda V1662 (lambda V1663 (lambda V1664 (lambda V1665 (unify! V1662 V1663 V1664 V1665))))))) (do (shen.set-lambda-form-entry (cons unput (lambda V1666 (lambda V1667 (lambda V1668 (unput V1666 V1667 V1668)))))) (do (shen.set-lambda-form-entry (cons unprofile (lambda V1669 (unprofile V1669)))) (do (shen.set-lambda-form-entry (cons undefmacro (lambda V1670 (undefmacro V1670)))) (do (shen.set-lambda-form-entry (cons return (lambda V1671 (lambda V1672 (lambda V1673 (return V1671 V1672 V1673)))))) (do (shen.set-lambda-form-entry (cons type (lambda V1674 (lambda V1675 (type V1674 V1675))))) (do (shen.set-lambda-form-entry (cons tuple? (lambda V1676 (tuple? V1676)))) (do (shen.set-lambda-form-entry (cons trap-error (lambda V1677 (lambda V1678 (trap-error V1677 V1678))))) (do (shen.set-lambda-form-entry (cons track (lambda V1679 (track V1679)))) (do (shen.set-lambda-form-entry (cons thaw (lambda V1680 (thaw V1680)))) (do (shen.set-lambda-form-entry (cons tc (lambda V1681 (tc V1681)))) (do (shen.set-lambda-form-entry (cons tl (lambda V1682 (tl V1682)))) (do (shen.set-lambda-form-entry (cons tlstr (lambda V1683 (tlstr V1683)))) (do (shen.set-lambda-form-entry (cons tail (lambda V1684 (tail V1684)))) (do (shen.set-lambda-form-entry (cons systemf (lambda V1685 (systemf V1685)))) (do (shen.set-lambda-form-entry (cons symbol? (lambda V1686 (symbol? V1686)))) (do (shen.set-lambda-form-entry (cons string->symbol (lambda V1687 (string->symbol V1687)))) (do (shen.set-lambda-form-entry (cons sum (lambda V1688 (sum V1688)))) (do (shen.set-lambda-form-entry (cons subst (lambda V1689 (lambda V1690 (lambda V1691 (subst V1689 V1690 V1691)))))) (do (shen.set-lambda-form-entry (cons string? (lambda V1692 (string? V1692)))) (do (shen.set-lambda-form-entry (cons string->n (lambda V1693 (string->n V1693)))) (do (shen.set-lambda-form-entry (cons step (lambda V1694 (step V1694)))) (do (shen.set-lambda-form-entry (cons spy (lambda V1695 (spy V1695)))) (do (shen.set-lambda-form-entry (cons specialise (lambda V1696 (specialise V1696)))) (do (shen.set-lambda-form-entry (cons snd (lambda V1697 (snd V1697)))) (do (shen.set-lambda-form-entry (cons simple-error (lambda V1698 (simple-error V1698)))) (do (shen.set-lambda-form-entry (cons set (lambda V1699 (lambda V1700 (set V1699 V1700))))) (do (shen.set-lambda-form-entry (cons str (lambda V1701 (str V1701)))) (do (shen.set-lambda-form-entry (cons reverse (lambda V1702 (reverse V1702)))) (do (shen.set-lambda-form-entry (cons remove (lambda V1703 (lambda V1704 (remove V1703 V1704))))) (do (shen.set-lambda-form-entry (cons read (lambda V1705 (read V1705)))) (do (shen.set-lambda-form-entry (cons read-file (lambda V1706 (read-file V1706)))) (do (shen.set-lambda-form-entry (cons read-file-as-bytelist (lambda V1707 (read-file-as-bytelist V1707)))) (do (shen.set-lambda-form-entry (cons read-file-as-string (lambda V1708 (read-file-as-string V1708)))) (do (shen.set-lambda-form-entry (cons read-byte (lambda V1709 (read-byte V1709)))) (do (shen.set-lambda-form-entry (cons read-from-string (lambda V1710 (read-from-string V1710)))) (do (shen.set-lambda-form-entry (cons package? (lambda V1711 (package? V1711)))) (do (shen.set-lambda-form-entry (cons put (lambda V1712 (lambda V1713 (lambda V1714 (lambda V1715 (put V1712 V1713 V1714 V1715))))))) (do (shen.set-lambda-form-entry (cons preclude (lambda V1716 (preclude V1716)))) (do (shen.set-lambda-form-entry (cons preclude-all-but (lambda V1717 (preclude-all-but V1717)))) (do (shen.set-lambda-form-entry (cons ps (lambda V1718 (ps V1718)))) (do (shen.set-lambda-form-entry (cons protect (lambda V1719 (protect V1719)))) (do (shen.set-lambda-form-entry (cons profile-results (lambda V1720 (profile-results V1720)))) (do (shen.set-lambda-form-entry (cons profile (lambda V1721 (profile V1721)))) (do (shen.set-lambda-form-entry (cons print (lambda V1722 (print V1722)))) (do (shen.set-lambda-form-entry (cons pr (lambda V1723 (lambda V1724 (pr V1723 V1724))))) (do (shen.set-lambda-form-entry (cons pos (lambda V1725 (lambda V1726 (pos V1725 V1726))))) (do (shen.set-lambda-form-entry (cons or (lambda V1727 (lambda V1728 (or V1727 V1728))))) (do (shen.set-lambda-form-entry (cons optimise (lambda V1729 (optimise V1729)))) (do (shen.set-lambda-form-entry (cons open (lambda V1730 (lambda V1731 (open V1730 V1731))))) (do (shen.set-lambda-form-entry (cons occurrences (lambda V1732 (lambda V1733 (occurrences V1732 V1733))))) (do (shen.set-lambda-form-entry (cons occurs-check (lambda V1734 (occurs-check V1734)))) (do (shen.set-lambda-form-entry (cons n->string (lambda V1735 (n->string V1735)))) (do (shen.set-lambda-form-entry (cons number? (lambda V1736 (number? V1736)))) (do (shen.set-lambda-form-entry (cons nth (lambda V1737 (lambda V1738 (nth V1737 V1738))))) (do (shen.set-lambda-form-entry (cons not (lambda V1739 (not V1739)))) (do (shen.set-lambda-form-entry (cons nl (lambda V1740 (nl V1740)))) (do (shen.set-lambda-form-entry (cons macroexpand (lambda V1741 (macroexpand V1741)))) (do (shen.set-lambda-form-entry (cons maxinferences (lambda V1742 (maxinferences V1742)))) (do (shen.set-lambda-form-entry (cons mapcan (lambda V1743 (lambda V1744 (mapcan V1743 V1744))))) (do (shen.set-lambda-form-entry (cons map (lambda V1745 (lambda V1746 (map V1745 V1746))))) (do (shen.set-lambda-form-entry (cons load (lambda V1747 (load V1747)))) (do (shen.set-lambda-form-entry (cons lineread (lambda V1748 (lineread V1748)))) (do (shen.set-lambda-form-entry (cons limit (lambda V1749 (limit V1749)))) (do (shen.set-lambda-form-entry (cons length (lambda V1750 (length V1750)))) (do (shen.set-lambda-form-entry (cons intersection (lambda V1751 (lambda V1752 (intersection V1751 V1752))))) (do (shen.set-lambda-form-entry (cons intern (lambda V1753 (intern V1753)))) (do (shen.set-lambda-form-entry (cons integer? (lambda V1754 (integer? V1754)))) (do (shen.set-lambda-form-entry (cons input (lambda V1755 (input V1755)))) (do (shen.set-lambda-form-entry (cons input+ (lambda V1756 (lambda V1757 (input+ V1756 V1757))))) (do (shen.set-lambda-form-entry (cons include (lambda V1758 (include V1758)))) (do (shen.set-lambda-form-entry (cons include-all-but (lambda V1759 (include-all-but V1759)))) (do (shen.set-lambda-form-entry (cons internal (lambda V1760 (internal V1760)))) (do (shen.set-lambda-form-entry (cons if (lambda V1761 (lambda V1762 (lambda V1763 (if V1761 V1762 V1763)))))) (do (shen.set-lambda-form-entry (cons identical (lambda V1764 (lambda V1765 (lambda V1766 (lambda V1767 (identical V1764 V1765 V1766 V1767))))))) (do (shen.set-lambda-form-entry (cons head (lambda V1768 (head V1768)))) (do (shen.set-lambda-form-entry (cons hd (lambda V1769 (hd V1769)))) (do (shen.set-lambda-form-entry (cons hdv (lambda V1770 (hdv V1770)))) (do (shen.set-lambda-form-entry (cons hdstr (lambda V1771 (hdstr V1771)))) (do (shen.set-lambda-form-entry (cons hash (lambda V1772 (lambda V1773 (hash V1772 V1773))))) (do (shen.set-lambda-form-entry (cons get (lambda V1774 (lambda V1775 (lambda V1776 (get V1774 V1775 V1776)))))) (do (shen.set-lambda-form-entry (cons get-time (lambda V1777 (get-time V1777)))) (do (shen.set-lambda-form-entry (cons gensym (lambda V1778 (gensym V1778)))) (do (shen.set-lambda-form-entry (cons fst (lambda V1779 (fst V1779)))) (do (shen.set-lambda-form-entry (cons freeze (lambda V1780 (freeze V1780)))) (do (shen.set-lambda-form-entry (cons fix (lambda V1781 (lambda V1782 (fix V1781 V1782))))) (do (shen.set-lambda-form-entry (cons fail-if (lambda V1783 (lambda V1784 (fail-if V1783 V1784))))) (do (shen.set-lambda-form-entry (cons findall (lambda V1785 (lambda V1786 (lambda V1787 (lambda V1788 (lambda V1789 (findall V1785 V1786 V1787 V1788 V1789)))))))) (do (shen.set-lambda-form-entry (cons enable-type-theory (lambda V1790 (enable-type-theory V1790)))) (do (shen.set-lambda-form-entry (cons explode (lambda V1791 (explode V1791)))) (do (shen.set-lambda-form-entry (cons external (lambda V1792 (external V1792)))) (do (shen.set-lambda-form-entry (cons eval-kl (lambda V1793 (eval-kl V1793)))) (do (shen.set-lambda-form-entry (cons eval (lambda V1794 (eval V1794)))) (do (shen.set-lambda-form-entry (cons error-to-string (lambda V1795 (error-to-string V1795)))) (do (shen.set-lambda-form-entry (cons empty? (lambda V1796 (empty? V1796)))) (do (shen.set-lambda-form-entry (cons element? (lambda V1797 (lambda V1798 (element? V1797 V1798))))) (do (shen.set-lambda-form-entry (cons do (lambda V1799 (lambda V1800 (do V1799 V1800))))) (do (shen.set-lambda-form-entry (cons difference (lambda V1801 (lambda V1802 (difference V1801 V1802))))) (do (shen.set-lambda-form-entry (cons destroy (lambda V1803 (destroy V1803)))) (do (shen.set-lambda-form-entry (cons declare (lambda V1804 (lambda V1805 (declare V1804 V1805))))) (do (shen.set-lambda-form-entry (cons cn (lambda V1806 (lambda V1807 (cn V1806 V1807))))) (do (shen.set-lambda-form-entry (cons cons? (lambda V1808 (cons? V1808)))) (do (shen.set-lambda-form-entry (cons cons (lambda V1809 (lambda V1810 (cons V1809 V1810))))) (do (shen.set-lambda-form-entry (cons concat (lambda V1811 (lambda V1812 (concat V1811 V1812))))) (do (shen.set-lambda-form-entry (cons compile (lambda V1813 (lambda V1814 (lambda V1815 (compile V1813 V1814 V1815)))))) (do (shen.set-lambda-form-entry (cons cd (lambda V1816 (cd V1816)))) (do (shen.set-lambda-form-entry (cons close (lambda V1817 (close V1817)))) (do (shen.set-lambda-form-entry (cons bound? (lambda V1818 (bound? V1818)))) (do (shen.set-lambda-form-entry (cons boolean? (lambda V1819 (boolean? V1819)))) (do (shen.set-lambda-form-entry (cons assoc (lambda V1820 (lambda V1821 (assoc V1820 V1821))))) (do (shen.set-lambda-form-entry (cons arity (lambda V1822 (arity V1822)))) (do (shen.set-lambda-form-entry (cons append (lambda V1823 (lambda V1824 (append V1823 V1824))))) (do (shen.set-lambda-form-entry (cons and (lambda V1825 (lambda V1826 (and V1825 V1826))))) (do (shen.set-lambda-form-entry (cons adjoin (lambda V1827 (lambda V1828 (adjoin V1827 V1828))))) (do (shen.set-lambda-form-entry (cons <-address (lambda V1829 (lambda V1830 (<-address V1829 V1830))))) (do (shen.set-lambda-form-entry (cons address-> (lambda V1831 (lambda V1832 (lambda V1833 (address-> V1831 V1832 V1833)))))) (do (shen.set-lambda-form-entry (cons absvector? (lambda V1834 (absvector? V1834)))) (shen.set-lambda-form-entry (cons absvector (lambda V1835 (absvector V1835))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.initialise () (do (shen.initialise-environment) (do (shen.initialise-lambda-forms) (do (shen.initialise-signedfunc-lambda-forms) (shen.initialise-signedfuncs)))))



